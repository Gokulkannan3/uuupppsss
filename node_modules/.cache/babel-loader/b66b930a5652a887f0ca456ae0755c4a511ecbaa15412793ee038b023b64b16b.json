{"ast":null,"code":"var _jsxFileName = \"D:\\\\ups\\\\src\\\\pages\\\\Fetch\\\\fetch.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Navbar from '../Nav';\nimport './fetch.css';\nimport { Link } from \"react-router-dom\";\nimport Footer from \"../Footer\";\n\n// Define a separate component for the content you want to refresh\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Content({\n  data\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-x-auto mt-8 shadow-black\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-zebra mx-auto w-1/2\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        className: \"bg-yellow-400 text-black\",\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"text-center w-1/4\",\n            children: \"AWB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"text-center w-1/4\",\n            children: \"Sender Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"text-center w-1/4\",\n            children: \"Origin Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"text-center w-1/4\",\n            children: \"Destination\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"text-center w-1/4\",\n            children: \"Tracking\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        className: \"tboby\",\n        children: data && data.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"text-center align-middle w-1/4\",\n            children: item.awb\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"text-center align-middle w-1/4\",\n            children: item.sender_data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"text-center align-middle w-1/4\",\n            children: item.origin_data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"text-center align-middle w-1/4\",\n            children: item.destination_data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: {\n                pathname: `/shipping/${item.awb}`,\n                state: {\n                  awb: item.awb,\n                  sender_data: item.sender_data,\n                  origin_data: item.origin_data,\n                  destination_data: item.destination_data\n                }\n              },\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn hover-bg-yellow-400 hover-text-black\",\n                children: \"Track\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n_c = Content;\nfunction Fetch() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://192.168.43.215:8080/rfid/getall\");\n        const actualData = await response.json();\n        setData(actualData);\n      } catch (err) {\n        console.log(err.message);\n      }\n    };\n\n    // Fetch data initially\n    fetchData();\n\n    // Refresh the data every 30 seconds (adjust as needed)\n    const refreshInterval = setInterval(() => {\n      fetchData();\n    }, 3000); // 30 seconds\n\n    return () => {\n      // Clear the interval when the component unmounts\n      clearInterval(refreshInterval);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Content, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(Fetch, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c2 = Fetch;\nexport default Fetch;\nvar _c, _c2;\n$RefreshReg$(_c, \"Content\");\n$RefreshReg$(_c2, \"Fetch\");","map":{"version":3,"names":["React","useEffect","useState","Navbar","Link","Footer","jsxDEV","_jsxDEV","Content","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","index","awb","sender_data","origin_data","destination_data","to","pathname","state","_c","Fetch","_s","setData","fetchData","response","fetch","actualData","json","err","console","log","message","refreshInterval","setInterval","clearInterval","_c2","$RefreshReg$"],"sources":["D:/ups/src/pages/Fetch/fetch.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Navbar from '../Nav'\r\nimport './fetch.css'\r\nimport { Link } from \"react-router-dom\";\r\nimport Footer from \"../Footer\";\r\n\r\n// Define a separate component for the content you want to refresh\r\nfunction Content({ data }) {\r\n  return (\r\n    <div className=\"overflow-x-auto mt-8 shadow-black\">\r\n      <table className=\"table table-zebra mx-auto w-1/2\">\r\n        <thead className=\"bg-yellow-400 text-black\">\r\n          <tr>\r\n            <th className=\"text-center w-1/4\">AWB</th>\r\n            <th className=\"text-center w-1/4\">Sender Data</th>\r\n            <th className=\"text-center w-1/4\">Origin Data</th>\r\n            <th className=\"text-center w-1/4\">Destination</th>\r\n            <th className=\"text-center w-1/4\">Tracking</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody className='tboby'>\r\n          {data && data.map((item, index) => (\r\n            <tr key={index}>\r\n              <td className=\"text-center align-middle w-1/4\">{item.awb}</td>\r\n              <td className=\"text-center align-middle w-1/4\">{item.sender_data}</td> \r\n              <td className=\"text-center align-middle w-1/4\">{item.origin_data}</td>\r\n              <td className=\"text-center align-middle w-1/4\">{item.destination_data}</td>\r\n              <td>\r\n                {/* Link to Shipping component with data */}\r\n                <Link\r\n                  to={{\r\n                    pathname: `/shipping/${item.awb}`,\r\n                    state: {\r\n                      awb: item.awb,\r\n                      sender_data: item.sender_data,\r\n                      origin_data: item.origin_data,\r\n                      destination_data: item.destination_data,\r\n                    },\r\n                  }}\r\n                >\r\n                  <button className=\"btn hover-bg-yellow-400 hover-text-black\">\r\n                    Track\r\n                  </button>\r\n                </Link>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Fetch() {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\"http://192.168.43.215:8080/rfid/getall\");\r\n        const actualData = await response.json();\r\n        setData(actualData);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n    };\r\n\r\n    // Fetch data initially\r\n    fetchData();\r\n\r\n    // Refresh the data every 30 seconds (adjust as needed)\r\n    const refreshInterval = setInterval(() => {\r\n      fetchData();\r\n    }, 3000); // 30 seconds\r\n\r\n    return () => {\r\n      // Clear the interval when the component unmounts\r\n      clearInterval(refreshInterval);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar /> {/* Navbar outside of the refreshing part */}\r\n      <Content data={data} /> {/* Content part that will be refreshed */}\r\n      <Footer /> {/* Footer outside of the refreshing part */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Fetch;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}